@use "sass:math";

$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px
);
$container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    xl: 1140px,
    xxl: 1320px
);
$grid-columns: 12;
$grid-gutter: 30px;

%gutter-padding {
    padding-left: $grid-gutter * 0.5;
    padding-right: $grid-gutter * 0.5;
}

.container-fluid {
    width: 100%;
    margin-left: auto;
    margin-right: auto;

}

.container {
    @extend .container-fluid;
    @extend %gutter-padding;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-left: -$grid-gutter * 0.5;
    margin-right: -$grid-gutter * 0.5;

    &[class*='row-cols-']>*,
    [class*='col-'] {
        flex: 0 0 auto;
        @extend %gutter-padding;
    }
}

.col {
    flex: 1 0;
    @extend %gutter-padding;
}

@mixin make-media-query($dimension, $isXs: false) {
    @if($isXs) {
        @content;
    }

    @else {
        @media (min-width: $dimension) {
            @content;
        }
    }
}

@mixin make-row-columns($infix) {
    @for $i from 1 through $grid-columns {
        .row-cols#{$infix}-#{$i}>* {
            width: math.div(100%, $i);
        }
    }
}

@mixin make-col($infix) {
    @for $i from 1 through $grid-columns {
        .col#{$infix}-#{$i} {
            width: math.div(100%, $grid-columns) * $i;
        }
    }
}

@each $breakpoint, $dimension in $grid-breakpoints {
    $max-width: map-get($container-max-widths, $breakpoint);
    $infix: if($breakpoint ==xs, '', '-#{$breakpoint}');
    $isXs: if($breakpoint ==xs, true, false);

    @include make-media-query($dimension, $isXs) {
        .container {
            max-width: $max-width;
        }

        @include make-row-columns($infix);
        @include make-col($infix);

    }
}